<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title> c&#43;&#43;11 - Tag - 子恒的博客</title>
        <link>http://chestnutheng.github.io/tags/c&#43;&#43;11/</link>
        <description> c&#43;&#43;11 - Tag - 子恒的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1085912251@qq.com (子恒)</managingEditor>
            <webMaster>1085912251@qq.com (子恒)</webMaster><lastBuildDate>Tue, 18 Aug 2020 19:34:11 &#43;0800</lastBuildDate><atom:link href="http://chestnutheng.github.io/tags/c&#43;&#43;11/" rel="self" type="application/rss+xml" /><item>
    <title>[C&#43;&#43;]C&#43;&#43; 11/14 笔记（四）</title>
    <link>http://chestnutheng.github.io/cpp_11_4/</link>
    <pubDate>Tue, 18 Aug 2020 19:34:11 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cpp_11_4/</guid>
    <description><![CDATA[本部分介绍了c++11的并发编程。这些笔记是未完成的。
语法参考这里：
现代C++教程
实现参考这里：
C++11中的mutex, lock，condition variable实现分析
std::thread C++ 11为我们带来了语言级的线程支持，包括线程的创建和等待：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 //g++ -o t main.cpp -lpthread --std=c++11 #include &lt;iostream&gt; #include &lt;thread&gt; #include &lt;chrono&gt; void foo(int sec) { // sleep_for() 休眠sec秒后唤醒 std::this_thread::sleep_for(std::chrono::seconds(sec)); } int main() { // join() 阻塞等待线程 // joinable() 是否可以join（没设置任务函数不可以join） std::thread t; std::cout &lt;&lt; &#34;before starting, joinable: &#34; &lt;&lt; t.]]></description>
</item>
<item>
    <title>[C&#43;&#43;]C&#43;&#43; 100行实现线程池</title>
    <link>http://chestnutheng.github.io/cpp_threadpool/</link>
    <pubDate>Fri, 07 Apr 2017 23:17:54 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cpp_threadpool/</guid>
    <description><![CDATA[一个100行左右的简单线程池。用到了std::mutex和std::thread等新特性。
线程池模型 首先把每个函数抽象为一个任务(Task)，任务的过程就是调用这个Task的run函数。
然后把线程池中的线程封装为一个线程类（Thread），一直等待调度器分配任务（空闲状态），如果有任务分配立即进入忙状态。等任务执行结束再次变为空闲状态。
最后是一个调度器类（TreadPool），包含任务队列（随时添加新任务），和一个包含了Thread的vector（线程池中的线程）。如果任务队列非空，调度器每次从中取出一个任务，然后轮询线程池，搜寻空闲线程并把这个任务交给线程。
模型如下图所示：
代码实现 下面的代码实现了上述模型。其中Task类通过睡眠一定的秒数模拟任务，可以看到T1先执行完毕（1秒完毕），T2和T3在之后同时完毕，说明调度非常成功。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 //linux, g++ -std=c++14 -o t *.]]></description>
</item>
<item>
    <title>[C&#43;&#43;]C&#43;&#43;多线程基础</title>
    <link>http://chestnutheng.github.io/cpp_multithreading/</link>
    <pubDate>Mon, 03 Apr 2017 13:58:53 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cpp_multithreading/</guid>
    <description><![CDATA[各种锁的基本概念以及在C++里的使用，还有C的一个生产消费模型。
操作系统的知识 概念 临界区：访问和操作共享数据的代码段
避免死锁：嵌套加锁时按顺序加锁, 防止发生饥饿
原子操作：atomic_t
自旋锁 自旋锁：请求该锁的线程在等待时自旋（特别耗费处理器时间），所以只能轻量级加锁（一般锁的时间小于上下文切换的开销）。
注意：对数据而不是对代码加锁。
读写自旋锁：读时(允许读，不允许写)，写时（不允许读，不允许写）。
注意：不能把读锁升级为写锁，不然会死锁。读写操作要清晰地分开。
信号量 信号量：请求锁的进程在等待时加入等待队列并睡眠。一般用于长时间加锁（唤醒、睡眠、加入队列都是很大的开销）。
通过P/V或者down()/up()操作来控制允许同时进行的线程数。信号量减一就等同与获取一个锁，锁为负数时线程就会进入等待队列。
0/1信号量（互斥信号量）：只允许同时一个线程执行。
计数信号量：允许同时多个线程执行。
读写信号量：互斥信号量的一种。
互斥体 互斥体(mutex): 可以睡眠的强制互斥锁。比信号量更加首选。
mutex和自旋锁的区别：
需求 加锁方法 低开销加锁 优先自旋锁 短期加锁 优先自旋锁 长期加锁 优先mutex 中断上下文加锁 只能自旋锁 持有锁时需要睡眠 只能mutex C++11 的线程库 std::thread std::thread用于创建一个执行的线程实例，所以它是一切并发编程的基础，使用时需要包含头文件，它提供了很多基本的线程操作，例如get_id()来获取所创建线程的线程 ID，例如使用join()来加入一个线程等。
std::mutex, std::unique_lock, std::lock_guard 使用std::mutex创建互斥体，std::unique_lock上锁。由于C++保证了所有栈对象在声明周期结束时会被销毁，所以这样的代码是异常安全的。无论发生异常还是正常结束，都会自动调用unlock()。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &lt;iostream&gt; #include &lt;thread&gt; #include &lt;mutex&gt; std::mutex mtx; void block_area() { std::unique_lock&lt;std::mutex&gt; lock(mtx); //.]]></description>
</item>
<item>
    <title>[C&#43;&#43;]C&#43;&#43; 11/14 笔记（三）</title>
    <link>http://chestnutheng.github.io/cpp11_3/</link>
    <pubDate>Mon, 30 Jan 2017 23:25:54 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cpp11_3/</guid>
    <description><![CDATA[本部分介绍了c++11的容器、智能指针和正则。
std::array 代替原来的c数组，提供了size()，empty()，大小比较以及迭代器。
注意：
声明的第二个模板参数必须是编译期常量 不能隐式转换为指针，调用data()返回c数组地址 1 2 3 4 5 6 7 8 9 std::array&lt;int,4&gt; arr = {1,2,3,4}; // C 风格接口传参 // foo(arr, arr.size()); // 非法, 无法隐式转换 foo(&amp;arr[0], arr.size()); foo(arr.data(), arr.size()); // 使用 `std::sort` std::sort(arr.begin(), arr.end()); std::forward_list 单向实现的列表，提供了O(1)的插入，并且比双向更省空间。
无序容器 传统 C++ 中的有序容器 std::map/std::set，这些元素内部通过红黑树进行实现，插入和搜索的平均复杂度均为 O(log(size))。在插入元素时候，会根据 &lt; 操作符比较元素大小并判断元素是否相同，并选择合适的位置插入到容器中。当对这个容器中的元素进行遍历时，输出结果会按照 &lt; 操作符的顺序来逐个遍历。
而无序容器中的元素是不进行排序的，内部通过 Hash 表实现，插入和搜索元素的平均复杂度为 O(constant)，在不关心容器内部元素顺序时，能够获得显著的性能提升。
C++11 引入了两组无序容器：std::unordered_map, std::unordered_multimap 和std::unordered_set, std::unordered_multiset。
它们的用法和原有的std::map/std::multimap/std::set/set::multiset基本类似。
std::tuple 提供了N元组的数据结构。
该数据结构在cpp14中还不够完善。
智能指针 在传统 C++ 里我们使用 new 和 delete 去『记得』对资源进行释放。而 C++11引入了智能指针的概念，使用了引用计数的想法，让程序员不再需要关心手动释放内存。这些智能指针包括 std::shared_ptr/std::unique_ptr/std::weak_ptr，使用它们需要包含头文件 &lt;memory&gt;。]]></description>
</item>
<item>
    <title>[C&#43;&#43;]C&#43;&#43; 11/14 笔记（二）</title>
    <link>http://chestnutheng.github.io/cpp11_2/</link>
    <pubDate>Sun, 29 Jan 2017 23:25:54 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cpp11_2/</guid>
    <description><![CDATA[本部分介绍了c++11的Lambda、函数容器和右值引用。
Lambda 结构：
1 2 3 [捕获列表](参数列表) -&gt; 返回类型{ // 函数体 } 比如定义一个加法的lambda：
1 2 3 4 auto add = [](auto x, auto y) { return x+y; }; add(1.0, 2.3); 捕获列表用于传递外部的变量，分为以下几种：
[] 空捕获列表 [name1, name2, &hellip;] 捕获一系列变量 [=] 值捕获, 捕获的变量为lambda表达式被创建时的值 [&amp;] 引用捕获, 值会发生变化 函数容器 std::function 函数的类型安全的容器。比如下面的std::function&lt;int(int)&gt; func2定义了一个返回值int,参数为(int)的一个函数对象。其中捕获列表是传引用的，所以返回的是调用func2时的1+value+important的值。
1 2 3 4 int important = 10; std::function&lt;int(int)&gt; func2 = [&amp;](int value) -&gt; int { return 1+value+important; }; std::bind/std::placeholder 有点像python的偏函数，它给函数一些预定的参数，以便于用更少的参数调用：
1 2 3 4 5 6 7 8 9 int foo(int a, int b, int c) { return a + b + c; } int main() { // 将参数1,2绑定到函数 foo 上，但是使用 std::placeholders::_1 来对第一个参数进行占位 auto bindFoo = std::bind(foo, std::placeholders::_1, 1,2); // 这时调用 bindFoo 时，只需要提供第一个参数即可 bindFoo(1); } 右值引用 右值和左值 以赋值符号为界，左面的表示一个对象，右面的表示一个对象的值]]></description>
</item>
<item>
    <title>[C&#43;&#43;]C&#43;&#43; 11/14 笔记（一）</title>
    <link>http://chestnutheng.github.io/cpp11_1/</link>
    <pubDate>Fri, 20 Jan 2017 10:15:13 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cpp11_1/</guid>
    <description><![CDATA[本部分介绍了c++11的崭新的类型推导、循环、模板和构造方法。
弃用的特性 1.　不允许以下赋值出现，应使用const char *后者auto。
1 char *str = &#34;hello world!&#34;; 2.　C语言风格的类型转换被弃用，应该使用 static_cast、reinterpret_cast、const_cast 来进行类型转换
3.　register， auto_ptr关键字被弃用。
语言增强 新的关键字 使用nullptr而不是NULL。新的nullptr为nullptr_t类型，可以隐式转换为任何类型，同时避免了NULL == 0这种类型冲突。
constexpr函数：告诉编译器返回的值为常量表达式
类型推导 auto类型 auto型可以作为变量的声明类型，函数的返回类型 auto型作为函数参数在c++17中才可使用，但要注意重载的问题 auto不能用于数组的类型推导
迭代器的样例： 1 for(auto itr = vec.cbegin(); itr != vec.cend(); ++itr); decltype函数 返回值为一个类型。比如我们可以把z声明为推测的类型
1 decltype(x+y) z = x + y; for(item:array)循环 像Python一样地迭代：
1 2 3 4 5 std::vector&lt;int&gt; arr(5, 100); // &amp; 启用了引用, 如果没有则对 arr 中的元素只能读取不能修改 for(auto &amp;i : arr) { std::cout &lt;&lt; i &lt;&lt; std::endl; } 初始化列表 除了]]></description>
</item>
</channel>
</rss>
