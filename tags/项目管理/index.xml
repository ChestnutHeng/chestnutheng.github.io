<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>项目管理 - Tag - 子恒的博客</title>
        <link>http://chestnutheng.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</link>
        <description>项目管理 - Tag - 子恒的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1085912251@qq.com (子恒)</managingEditor>
            <webMaster>1085912251@qq.com (子恒)</webMaster><lastBuildDate>Mon, 15 Aug 2022 15:37:19 &#43;0800</lastBuildDate><atom:link href="http://chestnutheng.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/" rel="self" type="application/rss+xml" /><item>
    <title>[管理]对新人友好的项目管理手册</title>
    <link>http://chestnutheng.github.io/%E5%AF%B9%E6%96%B0%E4%BA%BA%E5%8F%8B%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%89%8B%E5%86%8C/</link>
    <pubDate>Mon, 15 Aug 2022 15:37:19 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/%E5%AF%B9%E6%96%B0%E4%BA%BA%E5%8F%8B%E5%A5%BD%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%89%8B%E5%86%8C/</guid>
    <description><![CDATA[刚毕业的高材生小姜，有着浑厚的知识储备和满怀热情的心脏来到了某厂，在做了一段时间需求后，发现自己对做事靠谱的老司机倍加羡慕；为什么人家有条不紊，好评如潮？自己确手忙脚乱，频频提测delay，加班到深夜？
今天我们来帮帮小姜，看看小姜为什么技术扎实，态度积极确总是使不上劲？
（故事仅供参考，切勿对号入座）
需求详评 这周产品新提了一个需求，拉了小姜和老梁一起做，在详评会议上：
小姜：听的云里雾里，昏昏欲睡，听产品讲完后准备下来仔细看看代码哪里要改
老梁：对产品频频犀利发问：这个细节A为什么这样做，我感觉体验并不好？我们这个需求预期什么时候上线？是不是倒排？我看到这个项目需要我们合作方A做开发，定容了吗？
小姜恍然大悟的笔记（详评阶段应该做的）：
敲定需求细节，可以给出自己视角的建议 对产品考虑不周全的需求，结合现状进行扩充 对于欠缺价值的需求点，合理挑战 对于破坏系统设计过大的需求点，提早商量 敲定需求整体节奏和预期上线时间，为做方案做准备 对于涉及到前置依赖的需求，一定要尽早确认好工作节奏 UE稿什么时候出 下游是否已经定容、什么时候完成开发，下游依赖接口什么时候给 技术评审 小姜：往文档里贴了下代码截图片段，告诉大家我要改这里，其他人听的一脸懵
老梁：给了一个完整的方案，涉及到合作方的关注点的内容写的非常详细，获得一致好评
小姜复制了一份老梁的模板：
排期概览（开发、联调、测试、上线的准确时间） 业务背景（问题、目标、收益） 技术方案 设计模块和改动点列举 架构图、流程图、状态机、时序图、ER图 异常情况和处理 AB实验方案 老数据兼容 依赖下游方案 风险点（需求自身风险、产品影响风险、可维护性/效率风险） 存储设计 DB/TCC/MQ/Redis/ES的schema变更 数据量级、key、分片、索引、选型、异常处理 接口文档 http接口定义和使用文档 rpc接口定义和使用文档 服务治理 异常兜底 监控报警 工作量评估 工作拆分和估分 进度计划 自测用例 冒烟测试用例（描述、步骤、期望结果） 希望测试测到的地方 发布计划 MR 发布顺序 开发 评审之后大家迅速都加入了如火如荼的开发当中：
小姜：早早地做完了自己的工作，等着联调。联调前一天突然发现下游依赖的接口还没数据，一问原来是有个工作没有对齐漏掉了，心急如焚
老梁：按照之前拆分的开发计划，列出了一个详细的进度追踪表，可以看到工作分配到的人、完成时间、里程碑，还有风险；提前把问题消灭了，大家笑盈盈进入联调
功能点 开发状态 人力预估 开发者 自测完成 风险记录 功能A 未开始 5 小A 是 暂无 功能A适配 进行中 2 小B 否 下游接口延迟一天 功能B适配 已完成 2 小B 否 功能B 已完成 0.]]></description>
</item>
</channel>
</rss>
