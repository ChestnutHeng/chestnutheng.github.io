<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>编译原理 - Category - 子恒的博客</title>
        <link>http://chestnutheng.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
        <description>编译原理 - Category - 子恒的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1085912251@qq.com (子恒)</managingEditor>
            <webMaster>1085912251@qq.com (子恒)</webMaster><lastBuildDate>Tue, 27 Dec 2016 20:18:40 &#43;0800</lastBuildDate><atom:link href="http://chestnutheng.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/" rel="self" type="application/rss+xml" /><item>
    <title>[编译原理]Python实现的语义分析器</title>
    <link>http://chestnutheng.github.io/cmp_codegen/</link>
    <pubDate>Tue, 27 Dec 2016 20:18:40 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cmp_codegen/</guid>
    <description><![CDATA[语义分析是编译系统的第三部分,负责赋值检查,表达式检查以及代码生成.
基本思想 代码沿用了上一部分的文法表, 利用递归下降算法对每一个非终结符写一个函数. 但是文法多达70多条, 工作量太大, 就只实现了赋值语句, 表达式, 条件语句这几个代表性的文法规则. 其他实现起来也类似, 多写几个函数即可.
函数介绍 需要注意的几个细节:
compare_var_type用于比较类型, 比较失败则raise一个CompileError 在生成代码过程中, 有的传入了其他的变量, 是为了回填 把if回填做成了label的方式, 可以在后阶段再处理 未初始化的变量调用也留给了后阶段处理. 函数表:
成员函数 对应非终结符 备注 init() 初始化 get_register() 分配寄存器 get_label_no() 分配记号 compare_var_type(var_type_1,var_type_2) 比较类型,raise错误 build_table(x) 建立符号表 check_factor(factor) &lt;因式&gt; 用于检查 check_factors(factor) &lt;因式递归&gt; 用于检查 check_factor_c(fc) &lt;因子&gt; 用于检查 check_term(term) &lt;项&gt; 用于检查 check_exp(x) &lt;表达式&gt; 用于检查 check_stm(x) &lt;赋值函数&gt; 用于检查 generate_factor(factor) &lt;因式&gt; 用于生成 generate_factors(factors,factor) &lt;因式递归&gt; 用于生成 generate_factor_c(fc) &lt;因子&gt; 用于生成 generate_term(term,factor) &lt;项&gt; 用于生成 generate_exp(x) &lt;表达式&gt; 用于生成 generate_stm(x) &lt;赋值函数&gt; 用于生成 generate_func_blocks(x) &lt;函数块闭包&gt; 用于生成 generate_func_block(x) &lt;函数块&gt; 用于生成 generate_else_block(x) &lt;否则语句&gt; 用于生成 generate_logical(x) &lt;逻辑表达式&gt; 用于生成 generate_if(x) &lt;条件语句&gt; 用于生成 generate_code(tree) &lt;函数定义&gt; 用于生成 dfs(tree,func) 搜索函数 run(code) 获取生成结果 文法表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 &lt;函数定义&gt;-&gt;&lt;修饰词闭包&gt;&lt;类型&gt;&lt;变量&gt;[(]&lt;参数声明&gt;[)][{]&lt;函数块&gt;[}] &lt;修饰词闭包&gt;-&gt;&lt;修饰词&gt;&lt;修饰词闭包&gt; &lt;修饰词闭包&gt;-&gt;[@] &lt;修饰词&gt;-&gt;[public] &lt;修饰词&gt;-&gt;[private] &lt;修饰词&gt;-&gt;[protected] &lt;类型&gt;-&gt;[int]&lt;取地址&gt; &lt;类型&gt;-&gt;[char]&lt;取地址&gt; &lt;类型&gt;-&gt;[boolean]&lt;取地址&gt; &lt;类型&gt;-&gt;[void]&lt;取地址&gt; &lt;取地址&gt;-&gt;&lt;星号&gt;&lt;取地址&gt; &lt;取地址&gt;-&gt;[@] &lt;星号&gt;-&gt;[*] &lt;变量&gt;-&gt;&lt;标志符&gt;&lt;数组下标&gt; &lt;标志符&gt;-&gt;[id] &lt;数组下标&gt;-&gt;[[]&lt;因式&gt;[]] &lt;数组下标&gt;-&gt;[@] &lt;因式&gt;-&gt;[(]&lt;表达式&gt;[)] &lt;因式&gt;-&gt;&lt;变量&gt; &lt;因式&gt;-&gt;&lt;数字&gt; &lt;数字&gt;-&gt;[digit] &lt;表达式&gt;-&gt;&lt;因子&gt;&lt;项&gt; &lt;因子&gt;-&gt;&lt;因式&gt;&lt;因式递归&gt; &lt;因式递归&gt;-&gt;[*]&lt;因式&gt;&lt;因式递归&gt; &lt;因式递归&gt;-&gt;[/]&lt;因式&gt;&lt;因式递归&gt; &lt;因式递归&gt;-&gt;[@] &lt;项&gt;-&gt;[+]&lt;因子&gt;&lt;项&gt; &lt;项&gt;-&gt;[-]&lt;因子&gt;&lt;项&gt; &lt;项&gt;-&gt;[@] &lt;参数声明&gt;-&gt;&lt;声明&gt;&lt;声明闭包&gt; &lt;参数声明&gt;-&gt;[@] &lt;声明&gt;-&gt;&lt;修饰词闭包&gt;&lt;类型&gt;&lt;变量&gt;&lt;赋初值&gt; &lt;赋初值&gt;-&gt;[=]&lt;右值&gt; &lt;赋初值&gt;-&gt;[@] &lt;右值&gt;-&gt;&lt;表达式&gt; &lt;右值&gt;-&gt;[{]&lt;多个数据&gt;[}] &lt;多个数据&gt;-&gt;&lt;数字&gt;&lt;数字闭包&gt; &lt;数字闭包&gt;-&gt;[,]&lt;数字&gt;&lt;数字闭包&gt; &lt;数字闭包&gt;-&gt;[@] &lt;声明闭包&gt;-&gt;[,]&lt;声明&gt;&lt;声明闭包&gt; &lt;声明闭包&gt;-&gt;[@] &lt;函数块&gt;-&gt;&lt;声明语句闭包&gt;&lt;函数块闭包&gt; &lt;声明语句闭包&gt;-&gt;&lt;声明语句&gt;&lt;声明语句闭包&gt; &lt;声明语句闭包&gt;-&gt;[@] &lt;声明语句&gt;-&gt;&lt;声明&gt;[;] &lt;函数块闭包&gt;-&gt;&lt;赋值函数&gt;&lt;函数块闭包&gt; &lt;函数块闭包&gt;-&gt;&lt;for循环&gt;&lt;函数块闭包&gt; &lt;函数块闭包&gt;-&gt;&lt;条件语句&gt;&lt;函数块闭包&gt; &lt;函数块闭包&gt;-&gt;&lt;函数返回&gt;&lt;函数块闭包&gt; &lt;函数块闭包&gt;-&gt;[@] &lt;赋值函数&gt;-&gt;&lt;变量&gt;&lt;赋值或函数调用&gt; &lt;赋值或函数调用&gt;-&gt;[=]&lt;右值&gt;[;] &lt;赋值或函数调用&gt;-&gt;[(]&lt;参数列表&gt;[)][;] &lt;参数列表&gt;-&gt;&lt;参数&gt;&lt;参数闭包&gt; &lt;参数闭包&gt;-&gt;[,]&lt;参数&gt;&lt;参数闭包&gt; &lt;参数闭包&gt;-&gt;[@] &lt;参数&gt;-&gt;&lt;标志符&gt; &lt;参数&gt;-&gt;&lt;数字&gt; &lt;参数&gt;-&gt;&lt;字符串&gt; &lt;字符串&gt;-&gt;[string] &lt;for循环&gt;-&gt;[for][(]&lt;赋值函数&gt;&lt;逻辑表达式&gt;[;]&lt;后缀表达式&gt;[)][{]&lt;函数块&gt;[}] &lt;逻辑表达式&gt;-&gt;&lt;表达式&gt;&lt;逻辑运算符&gt;&lt;表达式&gt; &lt;逻辑运算符&gt;-&gt;[&lt;] &lt;逻辑运算符&gt;-&gt;[&gt;] &lt;逻辑运算符&gt;-&gt;[==] &lt;逻辑运算符&gt;-&gt;[!]]></description>
</item>
<item>
    <title>[编译原理]Python实现的语法分析器</title>
    <link>http://chestnutheng.github.io/cmp_grammar/</link>
    <pubDate>Tue, 27 Dec 2016 01:20:24 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cmp_grammar/</guid>
    <description><![CDATA[语法分析器是这套编译系统的第二部分,可以直接用上一篇中的词法分析器的结果继续做语法分析.
文法表 = =一直没时间更, 直到考试周格外闲&hellip;
借鉴了一个网络上的文法表, 覆盖了一些基础的C文法, 测试后发现该文法是LL(1)文法.
文法如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 &lt;函数定义&gt;-&gt;&lt;修饰词闭包&gt;&lt;类型&gt;&lt;变量&gt;[(]&lt;参数声明&gt;[)][{]&lt;函数块&gt;[}] &lt;修饰词闭包&gt;-&gt;&lt;修饰词&gt;&lt;修饰词闭包&gt; &lt;修饰词闭包&gt;-&gt;[@] &lt;修饰词&gt;-&gt;[public] &lt;修饰词&gt;-&gt;[private] &lt;修饰词&gt;-&gt;[protected] &lt;类型&gt;-&gt;[int]&lt;取地址&gt; &lt;类型&gt;-&gt;[char]&lt;取地址&gt; &lt;类型&gt;-&gt;[boolean]&lt;取地址&gt; &lt;类型&gt;-&gt;[void]&lt;取地址&gt; &lt;取地址&gt;-&gt;&lt;星号&gt;&lt;取地址&gt; &lt;取地址&gt;-&gt;[@] &lt;星号&gt;-&gt;[*] &lt;变量&gt;-&gt;&lt;标志符&gt;&lt;数组下标&gt; &lt;标志符&gt;-&gt;[id] &lt;数组下标&gt;-&gt;[[]&lt;因式&gt;[]] &lt;数组下标&gt;-&gt;[@] &lt;因式&gt;-&gt;[(]&lt;表达式&gt;[)] &lt;因式&gt;-&gt;&lt;变量&gt; &lt;因式&gt;-&gt;&lt;数字&gt; &lt;数字&gt;-&gt;[digit] &lt;表达式&gt;-&gt;&lt;因子&gt;&lt;项&gt; &lt;因子&gt;-&gt;&lt;因式&gt;&lt;因式递归&gt; &lt;因式递归&gt;-&gt;[*]&lt;因式&gt;&lt;因式递归&gt; &lt;因式递归&gt;-&gt;[/]&lt;因式&gt;&lt;因式递归&gt; &lt;因式递归&gt;-&gt;[@] &lt;项&gt;-&gt;[+]&lt;因子&gt;&lt;项&gt; &lt;项&gt;-&gt;[-]&lt;因子&gt;&lt;项&gt; &lt;项&gt;-&gt;[@] &lt;参数声明&gt;-&gt;&lt;声明&gt;&lt;声明闭包&gt; &lt;参数声明&gt;-&gt;[@] &lt;声明&gt;-&gt;&lt;修饰词闭包&gt;&lt;类型&gt;&lt;变量&gt;&lt;赋初值&gt; &lt;赋初值&gt;-&gt;[=]&lt;右值&gt; &lt;赋初值&gt;-&gt;[@] &lt;右值&gt;-&gt;&lt;表达式&gt; &lt;右值&gt;-&gt;[{]&lt;多个数据&gt;[}] &lt;多个数据&gt;-&gt;&lt;数字&gt;&lt;数字闭包&gt; &lt;数字闭包&gt;-&gt;[,]&lt;数字&gt;&lt;数字闭包&gt; &lt;数字闭包&gt;-&gt;[@] &lt;声明闭包&gt;-&gt;[,]&lt;声明&gt;&lt;声明闭包&gt; &lt;声明闭包&gt;-&gt;[@] &lt;函数块&gt;-&gt;&lt;声明语句闭包&gt;&lt;函数块闭包&gt; &lt;声明语句闭包&gt;-&gt;&lt;声明语句&gt;&lt;声明语句闭包&gt; &lt;声明语句闭包&gt;-&gt;[@] &lt;声明语句&gt;-&gt;&lt;声明&gt;[;] &lt;函数块闭包&gt;-&gt;&lt;赋值函数&gt;&lt;函数块闭包&gt; &lt;函数块闭包&gt;-&gt;&lt;for循环&gt;&lt;函数块闭包&gt; &lt;函数块闭包&gt;-&gt;&lt;条件语句&gt;&lt;函数块闭包&gt; &lt;函数块闭包&gt;-&gt;&lt;函数返回&gt;&lt;函数块闭包&gt; &lt;函数块闭包&gt;-&gt;[@] &lt;赋值函数&gt;-&gt;&lt;变量&gt;&lt;赋值或函数调用&gt; &lt;赋值或函数调用&gt;-&gt;[=]&lt;右值&gt;[;] &lt;赋值或函数调用&gt;-&gt;[(]&lt;参数列表&gt;[)][;] &lt;参数列表&gt;-&gt;&lt;参数&gt;&lt;参数闭包&gt; &lt;参数闭包&gt;-&gt;[,]&lt;参数&gt;&lt;参数闭包&gt; &lt;参数闭包&gt;-&gt;[@] &lt;参数&gt;-&gt;&lt;标志符&gt; &lt;参数&gt;-&gt;&lt;数字&gt; &lt;参数&gt;-&gt;&lt;字符串&gt; &lt;字符串&gt;-&gt;[string] &lt;for循环&gt;-&gt;[for][(]&lt;赋值函数&gt;&lt;逻辑表达式&gt;[;]&lt;后缀表达式&gt;[)][{]&lt;函数块&gt;[}] &lt;逻辑表达式&gt;-&gt;&lt;表达式&gt;&lt;逻辑运算符&gt;&lt;表达式&gt; &lt;逻辑运算符&gt;-&gt;[&lt;] &lt;逻辑运算符&gt;-&gt;[&gt;] &lt;逻辑运算符&gt;-&gt;[==] &lt;逻辑运算符&gt;-&gt;[!]]></description>
</item>
<item>
    <title>[编译原理]Python实现的词法分析器</title>
    <link>http://chestnutheng.github.io/cmp_lex/</link>
    <pubDate>Tue, 15 Nov 2016 11:02:42 &#43;0800</pubDate>
    <author>子恒</author>
    <guid>http://chestnutheng.github.io/cmp_lex/</guid>
    <description><![CDATA[最近在上华保健老师的课, 在学习的过程中做了一套编译系统, 外加顺便应付学校的作业. 这个词法分析器是这套编译系统的第一部分.
其中RE到DFA, DFA到NFA的部分都是手工完成, 自己规定token格式(C语言格式), 得到一个NFA.
课程内容详见:
编译原理MOOC
算法都是课程中的算法, 不再详述.伪代码可以在华老师的课件中找到.
state_machine.json 第一部分是手写的DFA, 用类似树状数组的方式存储.
几个Key的含义如下:
1 2 3 4 5 SS: 起始状态 FS: 接受状态 I: 接受字符 T: 转换表 //如&#34;8&#34;: {&#34;3&#34;: 10, &#34;5&#34;: 9}表示状态8输入I[3]可以转换到状态10, 状态8输入I[3]可以转换到状态9 S: 状态表 //下标对应的状态的含义 json文件:
state_machine.json
Driver.py 驱动文件,分析结果为三元组**(标识符, 内容, 行数)**的序列.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #!]]></description>
</item>
</channel>
</rss>
